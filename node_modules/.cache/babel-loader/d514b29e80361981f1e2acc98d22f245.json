{"ast":null,"code":"import _slicedToArray from\"/Users/suho/TeamProject/Spring/projectFinal/tripass/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useRef,useState,useEffect}from\"react\";export default(function(){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),value=_useState2[0],setValue=_useState2[1];var ref=useRef(null);var handleMouseOver=function handleMouseOver(){return setValue(true);};var handleMouseOut=function handleMouseOut(){return setValue(false);};useEffect(function(){var node=ref.current;if(node){node.addEventListener(\"mouseover\",handleMouseOver);node.addEventListener(\"mouseout\",handleMouseOut);return function(){node.removeEventListener(\"mouseover\",handleMouseOver);node.removeEventListener(\"mouseout\",handleMouseOut);};}},[]);return[ref,value];});","map":{"version":3,"sources":["/Users/suho/TeamProject/Spring/projectFinal/tripass/react/src/utilities/useHover.js"],"names":["useRef","useState","useEffect","value","setValue","ref","handleMouseOver","handleMouseOut","node","current","addEventListener","removeEventListener"],"mappings":"gLAAA,OAASA,MAAT,CAAiBC,QAAjB,CAA2BC,SAA3B,KAA4C,OAA5C,CAEA,eAAe,UAAM,eACOD,QAAQ,CAAC,KAAD,CADf,wCACZE,KADY,eACLC,QADK,eAGnB,GAAMC,CAAAA,GAAG,CAAGL,MAAM,CAAC,IAAD,CAAlB,CAEA,GAAMM,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,SAAMF,CAAAA,QAAQ,CAAC,IAAD,CAAd,EAAxB,CACA,GAAMG,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,SAAMH,CAAAA,QAAQ,CAAC,KAAD,CAAd,EAAvB,CAEAF,SAAS,CAAC,UAAM,CACd,GAAMM,CAAAA,IAAI,CAAGH,GAAG,CAACI,OAAjB,CACA,GAAID,IAAJ,CAAU,CACRA,IAAI,CAACE,gBAAL,CAAsB,WAAtB,CAAmCJ,eAAnC,EACAE,IAAI,CAACE,gBAAL,CAAsB,UAAtB,CAAkCH,cAAlC,EAEA,MAAO,WAAM,CACXC,IAAI,CAACG,mBAAL,CAAyB,WAAzB,CAAsCL,eAAtC,EACAE,IAAI,CAACG,mBAAL,CAAyB,UAAzB,CAAqCJ,cAArC,EACD,CAHD,CAID,CACF,CAXQ,CAWN,EAXM,CAAT,CAaA,MAAO,CAACF,GAAD,CAAMF,KAAN,CAAP,CACD,CAtBD","sourcesContent":["import { useRef, useState, useEffect } from \"react\";\n\nexport default () => {\n  const [value, setValue] = useState(false);\n\n  const ref = useRef(null);\n\n  const handleMouseOver = () => setValue(true);\n  const handleMouseOut = () => setValue(false);\n\n  useEffect(() => {\n    const node = ref.current;\n    if (node) {\n      node.addEventListener(\"mouseover\", handleMouseOver);\n      node.addEventListener(\"mouseout\", handleMouseOut);\n\n      return () => {\n        node.removeEventListener(\"mouseover\", handleMouseOver);\n        node.removeEventListener(\"mouseout\", handleMouseOut);\n      };\n    }\n  }, []);\n\n  return [ref, value];\n};\n"]},"metadata":{},"sourceType":"module"}